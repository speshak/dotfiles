-- Plugins for general editor look & feel, not specific to a programming
-- language
return {
  -- User interface
  'scrooloose/nerdtree',
  'ctrlpvim/ctrlp.vim',
  {'vim-airline/vim-airline',
    config = function(plugin)
      vim.g.airline_powerline_fonts = 1
    end
  },
  -- General plugins
  'tpope/vim-fugitive',
  'tpope/vim-surround',
  'cohama/lexima.vim',
  'ntpeters/vim-better-whitespace',
  {'nathanaelkane/vim-indent-guides',
    config = function()
      vim.g.indent_guides_start_level = 2
      vim.cmd([[
        hi IndentGuidesOdd  ctermbg=black
        hi IndentGuidesEven ctermbg=darkgrey
      ]])
    end
  },

  'AndrewRadev/splitjoin.vim',
  'AndrewRadev/switch.vim',
  'ConradIrwin/vim-bracketed-paste',
  'sheerun/vim-polyglot',
  'mbbill/undotree',
  'machakann/vim-highlightedyank',
  'tpope/vim-commentary',
  'tpope/vim-speeddating',
  {'antoyo/vim-licenses',
    config = function()
      vim.g.licenses_default_commands = {'gpl', 'mit'}
      vim.g.licenses_authors_name = 'Scott Peshak <{{ .email }}>'

      {{- if eq .environment "work" }}
      vim.g.licenses_copyright_holders_name = '{{ .employer }}'
      {{- else }}
      vim.g.licenses_copyright_holders_name = 'Scott Peshak <{{ .email }}>'
      {{- end }}
    end
  },

  {'dkarter/bullets.vim',
    config = function()
      vim.g.bullets_enabled_file_types = {
        'markdown', 'text', 'gitcommit', 'scratch'
      }
    end
  },

  -- todo-comments.nvim
  {
    'folke/todo-comments.nvim',
    dependencies = 'nvim-lua/plenary.nvim',
    event = { 'BufReadPost', 'BufNewFile' },
    config = true,
    keys = {
      {
        ']t',
        function()
          return require('todo-comments').jump_next()
        end,
        desc = 'Jump to next todo comment',
      },
      {
        '[t',
        function()
          return require('todo-comments').jump_prev()
        end,
        desc = 'Jump to previous todo comment',
      },
    },
  },

  -- nvim-autopairs
  {
    'windwp/nvim-autopairs',
    event = 'InsertEnter',
    opts = {
      disable_filetype = { 'TelescopePrompt', 'text' },
      disable_in_macro = false,
      check_ts = true,
    },
  },

  -- gitsigns.nvim
  {
    'lewis6991/gitsigns.nvim',
    init = function()
      -- load gitsigns only when a git file is opened
      vim.api.nvim_create_autocmd({ 'BufRead' }, {
        group = vim.api.nvim_create_augroup('GitSignsLazyLoad', { clear = true }),
        callback = function()
          vim.fn.system('git -C ' .. '"' .. vim.fn.expand('%:p:h') .. '"' .. ' rev-parse')
          if vim.v.shell_error == 0 then
            vim.api.nvim_del_augroup_by_name('GitSignsLazyLoad')
            vim.schedule(function()
              require('lazy').load({ plugins = { 'gitsigns.nvim' } })
            end)
          end
        end,
      })
    end,
    ft = 'gitcommit',
    keys = {
      --[[ {
        '<leader>gj',
        function()
          return require('gitsigns').next_hunk()
        end,
        desc = 'Next hunk',
      },
      {
        '<leader>gk',
        function()
          return require('gitsigns').prev_hunk()
        end,
        desc = 'Previous hunk',
      }, ]]
      {
        '<leader>gB',
        function()
          return require('gitsigns').blame_line()
        end,
        desc = 'Open git blame',
      },
      {
        '<leader>gp',
        function()
          return require('gitsigns').preview_hunk_inline()
        end,
        desc = 'Preview the hunk',
      },
      {
        '<leader>gr',
        function()
          return require('gitsigns').reset_hunk()
        end,
        mode = { 'n', 'v' },
        desc = 'Reset the hunk',
      },
      {
        '<leader>gR',
        function()
          return require('gitsigns').reset_buffer()
        end,
        desc = 'Reset the buffer',
      },
      {
        '<leader>gs',
        function()
          return require('gitsigns').stage_hunk()
        end,
        mode = { 'n', 'v' },
        desc = 'Stage the hunk',
      },
      {
        '<leader>gS',
        function()
          return require('gitsigns').stage_buffer()
        end,
        desc = 'Stage the buffer',
      },
      {
        '<leader>gu',
        function()
          return require('gitsigns').undo_stage_hunk()
        end,
        desc = 'Unstage the hunk',
      },
      {
        '<leader>gd',
        function()
          return require('gitsigns').diffthis()
        end,
        desc = 'Open a diff',
      },
      {
        '<leader>gq',
        function()
          return require('gitsigns').setqflist()
        end,
        desc = 'Open quickfix list with hunks',
      },
      {
        '<leader>gl',
        function()
          return require('gitsigns').setloclist()
        end,
        desc = 'Open location list with hunks',
      },
      {
        '<leader>gL',
        function()
          return require('gitsigns').toggle_current_line_blame()
        end,
        desc = 'Toggle line blame',
      },
      {
        ']g',
        function()
          return require('gitsigns').next_hunk()
        end,
        desc = 'Next hunk',
      },
      {
        '[g',
        function()
          return require('gitsigns').prev_hunk()
        end,
        desc = 'Previous hunk',
      },
    },
    opts = {
      signs = {
        add = { text = '+' },
        change = { text = '~' },
        delete = { text = '-' },
        topdelete = { text = '-' },
        changedelete = { text = '~' },
      },
      attach_to_untracked = true,
      numhl = true,
      -- word_diff = true,
    },
  },


}

-- vim:ft=lua
